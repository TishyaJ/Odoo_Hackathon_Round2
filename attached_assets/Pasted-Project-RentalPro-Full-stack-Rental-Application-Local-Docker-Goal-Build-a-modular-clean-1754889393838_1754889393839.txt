Project: RentalPro – Full-stack Rental Application (Local + Docker)

Goal:
Build a modular, clean, full-stack rental app running entirely locally with Docker Compose. Use **Node.js + Express** (backend), **React + Tailwind** (frontend), **Prisma ORM + PostgreSQL** (local DB), and **Cloudinary** for dynamic photo uploads. Ensure all logic and UI are data-driven, not hard-coded.

Key Features:

1. **Authentication & Role-Based Access (JWT)**:
   - Customer login/register with option to either **List Items** (for renting out) or **Rent Items** (browse and book).
   - Admin/staff login with access to administrative tools only.
   - Late return penalty: **5% per day** of original price for overdue rentals.

2. **Backend Requirements**:
   - Prisma models: Users (with role), Products, Bookings (with status and dates), Pricelists, Invoices, Notifications, LateFees.
   - Cloudinary integration for product photo uploads (via signed upload endpoint using Multer and Cloudinary SDK) :contentReference[oaicite:0]{index=0}.
   - All logic dynamic: duration options, pricing rules, statuses, late fees must come from database; nothing hardcoded.
   - APIs:
     - Auth: register, login (JWT), middleware for RBAC.
     - Products: CRUD (admin), listing + dynamic availability(with duration and pricing preview) for customer.
     - Bookings: quote → confirm order → reserve stock, calculate late fees (5% per day) dynamically.
     - Payments: Stripe (test mode) integrated with secure webhook and idempotent handling.
     - Pickup/Returns: create and track process, update statuses, only show overdue/returned items to Admin UI—not front page.
     - Cloudinary upload endpoint with env-based config.
   - Use validation (e.g., Joi or zod), structured error handling, logging.

3. **Frontend (React + Tailwind)**:
   - **Customer Flow**:
     - Login/register, choose to *List* or *Rent*.
     - Product listing: dynamic filtering, rentals by hour/day/week/month; pricing preview dynamically updated.
     - Booking flow: Availability calendar/list, quotations, checkout.
     - Booking history and statuses—but **exclude late return indicators** from general user view.
   - **Admin Flow**:
     - Dashboard: interactive booking timeline from reservation → pickup → return.
     - Manage products: forms with Cloudinary photo uploads.
     - Pricelist editor: duration, segment, time-bound rules.
     - Bookings list: status management, drag-and-drop rescheduling.
     - Reports: revenue, most-rented items, late returns (only appear here), export as CSV/Excel.

4. **Late Return Logic**:
   - 5% of booked price per day overdue, calculated in backend—Admin UI displays overdue counts and extra charges; customers do not see this flag on their main page.

5. **Docker & Local Setup**:
   - `docker-compose.yml` to setup backend server, PostgreSQL, Redis (for jobs), and frontend.
   - Lightweight enough for Replit free tier; uses Replit secrets for Stripe, Cloudinary.

6. **Deliverables**:
   - Fully functional local version.
   - README with setup steps: Docker, migrations, environment vars, running dev UI.
   - All values dynamic, database-driven, modular architecture.

Make sure the UI and data interconnect: no page is isolated; everything reacts to changes. Avoid any static durations, statuses, or pricing logic in the code—everything must be pulled dynamically from APIs.

Use best practices for Replit free-tier (minimal resource use, secrets management, efficient code).
