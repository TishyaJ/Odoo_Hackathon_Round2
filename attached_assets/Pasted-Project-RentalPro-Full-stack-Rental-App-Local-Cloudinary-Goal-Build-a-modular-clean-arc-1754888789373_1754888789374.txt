Project: RentalPro – Full-stack Rental App (Local + Cloudinary)

Goal:
Build a modular, clean-architecture full-stack rental platform that runs fully **locally via Docker**. Use **Node.js + Express** for the backend, **React + Tailwind** for the frontend, and orchestrate everything with Docker Compose. Use **Prisma ORM + PostgreSQL** (local) for structured, relational data, and **Cloudinary** for dynamic image uploads.

Requirements:

**Backend (Express + Prisma):**
- Dockerized PostgreSQL for local data persistence.
- Use Prisma ORM with models for Users, Products, Pricelists, Bookings, Invoices, LateFees, Notifications.
- Cloudinary integration for product photos (upload endpoint + signed upload URLs).
- Role-Based Access Control (Customer and Admin).
- APIs:
  - Auth: register/login (JWT), with role-based middleware.
  - Products: CRUD for Admin, listing + availability for Customer.
  - Bookings: quotation → confirm → order, with real-time availability check and stock reservation.
  - Payments: Stripe integration (test mode), full/partial payments, secure webhook handling.
  - Pickup/Return: create and track pickup and return actions (update stock).
  - Pricing rules: dynamic pricing per duration/segment/timeframe.
  - Notification config: set N-days lead time and schedule reminder jobs.
  - Reports: revenue, most-rented products, late returns; download as CSV or Excel.
- Error handling, validation (e.g., using Joi or zod), logging.

**Frontend (React + Tailwind):**
- Role-based UI (Customer vs Admin).
- Customer pages:
   - Product Listing page with search and filters.
   - Rental Booking page with:
     - Availability calendar/list view with real-time status.
     - Rental duration selector (hour/day/week/month) with **dynamic price preview** and savings logic.
     - Photo gallery (Cloudinary).
     - Quote to Confirm → Checkout flow.
- Admin pages:
   - Dashboard with interactive booking timeline (reservation → pickup → return).
   - Product management page with Cloudinary photo upload component.
   - Pricelist/rules editor (time-based, segment-based).
   - Bookings list with status management and pickup/return actions (drag-and-drop rescheduling).
   - Reports page with CSV/Excel export, charts for revenue and popular items.

**UI Dynamism:**
- No hardcoded values (e.g., duration options, pricing tiers, statuses) — all data-driven via API.
- Interactive components: calendar widgets, drag-and-drop scheduling, live price updates, slick UX animations.

**Docker & Local Setup:**
- `docker-compose.yml` to run backend, PostgreSQL, and Redis (for scheduling).
- Scripts or env placeholders included; README to explain setup (`docker compose up`, env vars, migration steps).

**Free-tier Replit Compatible:**
- Lightweight services only: PostgreSQL and Redis; no heavy extras.
- Optimize for memory and CPU limits (~512 MB RAM).
- Use Replit’s built-in secret management for sensitive keys (Stripe, Cloudinary).
